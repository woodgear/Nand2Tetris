// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //按照P94 图5.9 实现实现的简单CPU
    //A指令

    //Reg A
    //A指令 还是C指令 存储 A寄存器
    //C指令 存A reg   
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=outAMux);
    Not(in=instruction[15],out=isA);
    Or(a=isA,b=instruction[5],out = writeA);
    ARegister(in=outAMux,load=writeA,out=outA,out[0..14]=addressM);

    And(a=instruction[4],b=instruction[15],out=writeD);
    //Reg D
    DRegister(in=outALU,load=writeD,out=outD);

    And(a=instruction[3],b=instruction[15],out=writeM);

    //C指令
    //a位切换输入
    Mux16(a=outA,b=inM,sel=instruction[12],out=X);
    //c位控制计算
    ALU(x=X,y=outD,zx=instruction[9],nx=instruction[8],zy=instruction[11],ny=instruction[10],f=instruction[7],no=instruction[6],out=outALU,out=outM,zr=outZR,ng=outNG);

    DMux8Way(in=instruction[15],sel=instruction[0..2],a=NULL,b=JGT,c=JEQ,d=JGE,e=JLT,f=JNE,g=JLE,h=JMP);


    Not(in=outZR,out=isNZ); //!0 = !0
    And(a=isNZ,b=outNG,out=isLT); //< = <
    Or(a=outNG,b=outZR,out=isLE);//<= < || =

    Not(in=outNG,out=NNG); //>= = !<
    And(a=isNZ,b=NNG,out=isGT);// > = !0 !<
    

    And(a=JGT,b=isGT,out=JMPJGT);
    And(a=JEQ,b=outZR,out=JMPJEQ);
    And(a=JGE,b=NNG,out=JMPJGE);
    And(a=JLT,b=isLT,out=JMPJLT);
    And(a=JNE,b=isNZ,out=JMPJNE);
    And(a=JLE,b=isLE,out=JMPJLE);
    And(a=JMP,b=true,out=JMPJMP);
    Or8Way(in[0]=JMPJGT,in[1]=JMPJEQ,in[2]=JMPJGE,in[3]=JMPJLT,in[4]=JMPJNE,in[5]=JMPJLE,in[6]=JMPJMP,out=iSJUMP);

    PC(in=outA,load=iSJUMP,inc=true,reset=reset,out[0..14]=pc);
}